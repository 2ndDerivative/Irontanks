buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'curseforge'

def versionInfo = getGitVersion()
def gitLog = getGitLog()

minecraft {
    version = "1.7.10-10.13.4.1448-1.7.10"
    runDir = "run"
}

curse {
    apiKey = System.getenv("CURSE_API_KEY")
    projectId = '236226'
    releaseType = 'beta'
    changelog = gitLog['message']
    relatedProject 'buildcraft': 'requiredLibrary'
}

version = "${project.minecraft.version}-${versionInfo['IronTanks.version']}"
group = "com.indemnity83.irontank"
archivesBaseName = "irontank"

repositories {
    ivy {
        name "BuildCraft"
        artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision]-[classifier].[ext]"
    }
}

dependencies {
    compile name: "buildcraft", version: "7.1.22", classifier: "dev"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    // generate version.properties file from the git version data earlier
    doLast {
        def propsFile = new File(destinationDir, 'version.properties')
        def properties = new Properties()
        properties.putAll(versionInfo)
        properties['IronTanks.build.mcversion'] = project.minecraft.version
        properties.store(propsFile.newWriter(), null)
    }
}

// This is a special task for pulling the version information from git and the environment (for BUILD_NUMBER)
def getGitVersion()
{
	def out = [:]

	// call git command.
	def outStream = new ByteArrayOutputStream()
	def result = exec {
		executable = 'git'
		args = [ 'describe', '--long']
		standardOutput = outStream
	}

	def fullVersion = outStream.toString().trim()
	def matcher = fullVersion =~ /(\d+).(\d+)-(\d+)-(.*)/

	def maj = matcher[0][1]
	def min = matcher[0][2]
	def rev = matcher[0][3]
	def bn = System.getenv("PROMOTED_NUMBER") ?: System.getenv("BUILD_NUMBER") ?: "dev"

	out['IronTanks.build.major.number'] = maj.toString()
	out['IronTanks.build.minor.number'] = min.toString()
	out['IronTanks.build.revision.number'] = rev.toString()
	out['IronTanks.build.githash'] = matcher[0][4].toString()
	out['IronTanks.build.number' ] = bn.toString()
	out['IronTanks.version' ] = "${maj}.${min}.${rev}.${bn}".toString()

	return out
}

def getGitLog()
{
	def out = [:]

	// call git command.
	def outStream = new ByteArrayOutputStream()
	def result = exec {
		executable = 'git'
		args = [ 'log', '--format=short', '-n 1', 'HEAD']
		standardOutput = outStream
	}

	out['message'] = outStream.toString().trim()

    return out
}
